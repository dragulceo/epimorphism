###Module
id df_sphere
component df_sphere
flags {lib, distance, distance_field}
par {diam: wave 0.043 0.1 0.9, tex_sc: wave 0.04 0.4 0.45}
modules {cam_trans: trans1}

###Component
id df_sphere
family distance_field
default_mod df_sphere
children {cam_trans: cam_trans}
code &&&

vec3 cam = pos;
%cam_trans%

float d = length(cam) - |diam|;

vec3 sc = cam / |tex_sc|;
vec2 ofs = sc.xy;
ofs = (ofs + vec2(1.0)) / vec2(2.0);

df = vec3(ofs, d);


###Module
id df_cylinder
component df_cylinder
flags {lib, distance, distance_field}
par {diam: wave 0.041 0.1 0.5, tex_sc: wave 0.054 0.55 0.45}
modules {cam_trans: trans_y}

###Component
id df_cylinder
family distance_field
default_mod df_cylinder
children {cam_trans: cam_trans}
code &&&

vec3 cam = pos;
%cam_trans%

float d = length(cam.xz) - |diam|;

vec3 sc = cam / |tex_sc|;
vec2 ofs;
ofs = vec2(atan(sc.x, sc.z) / PI, -1.0 * sc.y / (2.0 * PI * |diam|));
ofs = (ofs + vec2(1.0)) / vec2(2.0);

df = vec3(ofs, d);


###Module
id df_cube
component df_cube
flags {lib, distance, distance_field}
par {diam: wave 0.052 0.1 0.5, tex_sc: wave 0.05 0.7 0.1}
modules {cam_trans: trans2}

###Component
id df_cube
family distance_field
default_mod df_cube
children {cam_trans: cam_trans}
code &&&

vec3 cam = pos;
%cam_trans%

vec3 dc  = abs(cam) - vec3(|diam|);
float d = min(max(dc.x, max(dc.y, dc.z)), 0.0) + length(max(dc, 0.0));

vec3 sc = cam / (|tex_sc| * |diam|);
vec2 ofs;

// optomize?
if(abs(sc.z) > sc.x && abs(sc.z) > -1.0 * sc.x &&
   abs(sc.z) > sc.y && abs(sc.z) > -1.0 * sc.y){
  ofs = sc.xy;
}else if(abs(sc.x) > sc.y && abs(sc.x) > -1.0 * sc.y &&
   abs(sc.x) > sc.z && abs(sc.x) > -1.0 * sc.z){
  ofs = sc.yz;
}else
  ofs = sc.zx;

ofs = (ofs + vec2(1.0)) / vec2(2.0);

df = vec3(ofs, d);


###Module
id df_torus
component df_torus
flags {lib, distance, distance_field}
par {diam1: wave 0.041 0.1 0.7, diam2: wave 0.029 0.05 0.2, tex_sc: wave 0.04 0.4 0.47}
modules {cam_trans: trans2}

###Component
id df_torus
family distance_field
default_mod df_torus
children {cam_trans: cam_trans}
code &&&

vec3 cam = pos;
%cam_trans%

vec2 q = vec2(length(cam.xy) - |diam1|, cam.z);
float d = length(q) - |diam2|;

vec2 ofs;
ofs = vec2(atan(q.x / |tex_sc|, q.y / |tex_sc|) / PI,
           atan(cam.x / |tex_sc|, cam.y / |tex_sc|) / (2.0 * PI * |diam2|));
ofs = (ofs + vec2(1.0)) / vec2(2.0);

df = vec3(ofs, d);

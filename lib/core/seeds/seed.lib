###Module
id seed_na
component seed_main
flags {lib, dev, root}
modules {seed:seed_nothing}

###Module
id seed_dev
component seed_main
flags {lib, dev, root}
modules {seed:seed_wca}

###Module
id seed_nothing
component seed_nothing
flags {lib}

### Component
id seed_nothing
family seed
default_mod seed_nothing
code &&&
seed = vec4(0.0);

###Module
id seed_dev_distance
component seed_main
flags {lib, dev, root}
modules {seed:seed_distance}

###Module
id seed_buf
component seed_buf
flags {lib}

###Component
id seed_buf
family seed
default_mod seed_buf
code &&&
frame_z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
seed = texture2D(seedBuf, frame_z);


###Module
id seed_wrap
component seed_wrap
flags {lib}
modules {t_seed:t_wrap, seed_body:seed_buf, seed_mod:mod_id, reduce:torus_reduce}

###Component
id seed_wrap
family seed
default_mod seed_wrap
children {seed_body:seed, t_seed:t, seed_mod:seed_mod, reduce:reduce}
code &&&
%reduce% // add an additional layer of symmetry
%t_seed%
%reduce%
%seed_body%
%seed_mod%


###Module
id seed_simple
component seed_simple
flags {lib}
par {w:0.2, alpha:1.0}

### Component
id seed_simple
family seed
default_mod seed_simple
includes []
code &&&
float wx = (abs(z.x) + |w| - 1.0) / |w|;
float wy = (abs(z.y) + |w| - 1.0) / |w|;

float w = max(0.0, max(wx, wy));
float mask = ceil(w);

seed = hsv2rgb(vec4(0.0, 1.0, w, mask * |alpha|));


###Module
id seed_img1
component seed_simple_img
flags {img}
images [textures/default.png]
par {w:0.2, alpha:1.0}

### Component
id seed_simple_img
family seed
default_mod seed_simple_img
code &&&
float wx = (abs(z.x) + |w| - 1.0) / |w|;
float wy = (abs(z.y) + |w| - 1.0) / |w|;

float w = max(0.0, max(wx, wy));
float mask = ceil(w);

float sc = 0.25;
vec2 ofs = mod(sc * vec2(wx, wy), 1.0);
seed = texture2D(aux[#0], ofs);

// mask w
seed.w *= mask * |alpha|;

// preserve val
seed = rgb2hsv(seed);
seed.z *= w;
seed = hsv2rgb(seed);


###Module
id seed_multi
component seed_multi
flags {lib, multi}
modules {reduce:torus_reduce, t:t_wrap, t_seed0:t_affine, seed0:seed_wca, t_seed1:t_affine, seed1:seed_nothing, t_seed2:t_affine, seed2:seed_nothing}


### Component
id seed_multi
family seed
default_mod seed_multi
children {seed0:seed, seed1:seed, seed2:seed}
code &&&
vec4 seed0, seed1, seed2;
vec2 z_orig = z;

%t_seed0%
%reduce%
%seed0%
seed0 = seed;

z = z_orig;
%t_seed1%
%reduce%
%seed1%
seed1 = seed;

z = z_orig;
%t_seed2%
%reduce%
%seed2%
seed2 = seed;

float a = 1.0 - (1.0 - seed0.a) * (1.0 - seed1.a) * (1.0 - seed2.a);

if(a == 0.0)
  seed = vec4(0.0);
else {
  vec4 m1 = mix(seed0.a * seed0, seed1, seed1.a);
  vec4 m2 = mix(m1, seed2, seed2.a);
  seed = 1.0 / a * m2;
}
seed.a = a;

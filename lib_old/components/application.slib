application test_pattern {{
  z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
  color = vec4(z, 0.0, 1.0);
}}

application main_test_image {{
  z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
  color = 0.5 * texture2D(aux[#0], z);
  color += 0.5 * texture2D(aux[#1], z);
}}

application epimorphism {{
  vec4 seed, frame;
  vec2 frame_z, t_z;

	vec4 accum = vec4(0.0, 0.0, 0.0, 0.0);

	float delta = 1.0 / (float($fract$) * kernel_dim);
	float ofs = delta * (float($fract$) - 1.0);

#ifndef _NO_FRACT_
 	for(int i=0; i<$fract$; i++){
		for(int j=0; j<$fract$; j++){
      z = z_in;
      z = z - vec2(ofs, ofs) + vec2(2.0 * delta * float(i), 2.0 * delta * float(j));
#else
			z = z_in;
#endif

			%t%

			// get frame
			t_z = z;
			%reduce%
			frame_z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
			frame = texture2D(fb, frame_z);
			z = t_z;

			%seed%

			// blend
			//accum += vec4(seed.a * seed.rgb + (1.0 - seed.a) * frame.rgb, seed.a);
			//float x = (z_in.x + 1.0) / 2.0;
			//float b = (1.0 - x) * seed.a + x * (1.0 - seed.a);
			float a = seed.a;
			seed.a = DEPTH_INC;
			frame.a = frame.a + DEPTH_INC;
			accum += mix(frame, seed, a);
#ifndef _NO_FRACT_
		}
	}
#endif
	z = z_in;

#ifndef _NO_FRACT_
	float f2 = float($fract$ * $fract$);
	color = accum / vec4(f2, f2, f2, f2);
#else
	color = accum;
#endif

  %color%
}}


application julia {{
  int j = 0;
  const int max_iter = 700;
  float escape_rad = 4.0;

	z = z_in;

	for(int i = 0; i < max_iter; i++){
		if(dot(z,z) > escape_rad)
			break;

    %t%

		j += 1;
  }

	  %t%
    %t%
    %t%

  float mu = float(j) - log(log(length(z)) / log(2.0) ) / log(2.0);

  if(j != max_iter){
		//color = hsv2rgb(vec4(float(j) / 256.0, 1.0, 1.0, 1.0));
		float f1 = 1.0 - 1.0 / (mu / 6.0 + 1.0);
		float f2 = 1.0 - 1.0 / (mu / 3.0 + 1.0);
		color = vec4(f1, f2, 1.0, 1.0);

			//hsv2rgb(vec4(mu / 20.0, 1.0, 1.0, 1.0));
	}else
		color = vec4(0.0,0.0,0.0,1.0);

	z = z_in;
}}

### Module
id seed_color_id
component seed_color_id
flags {lib}

### Component
id seed_color_id
family seed_color
default_mod seed_color_id
code &&&
// Nothing


### Module
id simple_color
component simple_color
flags {lib}
par {spd:0.0, rot:0.0, sat:1.0, val:1.0}

### Component
id simple_color
family seed_color
default_mod simple_color
code &&&
seed = hsv2rgb(vec4(time * |spd| + |rot|, |sat|, w * |val|, a));


### Module
id border_color
component border_color
flags {lib}

### Component
id border_color
family seed_color
default_mod border_color
code &&&
seed = hsv2rgb(vec4((w > 0.8 ? 0.66 : 0.3), 1.0, 1.0, a));


### Module
id tex_color_test
component tex_color
flags {lib}
images [textures/simplegeom/tile_grid3.png]
par {scale:1.0, spd:0.0, rot:0.0, sat:1.0, val:1.0}


### Module
id tex_simple
component tex_simple
flags {lib}
images [textures/default/default0.png]
par {scale:1.0}

### Module
id tex_simple1
component tex_simple
flags {lib}
images [textures/default/default1.png]
par {scale:1.0}

### Component
id tex_simple
family seed_color
default_mod tex_color_dist
code &&&
vec2 tex_ofs = 2.0 * ofs - vec2(1.0);
tex_ofs = |scale| * torus_reduce(tex_ofs);
tex_ofs = (tex_ofs + vec2(1.0)) / 2.0;
seed = texture2D(aux[#0], tex_ofs);


### Module
id tex_color
component tex_color
flags {lib}
images [textures/default/default0.png]
par {scale:wave 0.02 0.1 0.33, spd:0.0, rot:0.0, sat:1.0, val:1.0}

### Component
id tex_color
family seed_color
default_mod tex_color
code &&&
vec2 tex_ofs = 2.0 * ofs - vec2(1.0);
tex_ofs = |scale| * torus_reduce(tex_ofs);
tex_ofs = (tex_ofs + vec2(1.0)) / 2.0;
seed = texture2D(aux[#0], tex_ofs);
seed = rgb2hsv(seed);

// multiplying the value by w makes things look nice
// should possibly put this in a flag
seed = hsv2rgb(vec4(seed.x + time * |spd| + |rot|, |sat| * seed.y, |val| * seed.z * w, a * seed.a));


### Module
id tex_color_scroll
component tex_color_scroll
flags {lib}
images [textures/default/default0.png]
par {scale:wave 0.02 0.1 0.33, spd:0.0, rot:0.0, sat:1.0, val:1.0, tex_spd:1.0}

### Component
id tex_color_scroll
family seed_color
default_mod tex_color_scroll
code &&&
vec2 tex_ofs = 2.0 * ofs - vec2(1.0);
//float ti = 0.023 * time * |tex_spd|;
//vec2 rot = mod(vec2(cos(ti) * tex_ofs.x - sin(ti) * tex_ofs.y, sin(ti) * tex_ofs.x + cos(ti) * tex_ofs.y), 1.0);
tex_ofs = |scale| * tex_ofs;
tex_ofs.x += time * 0.025 * |tex_spd|;
tex_ofs.y += cos(time * 0.027 * |tex_spd|);
tex_ofs = torus_reduce(tex_ofs);
tex_ofs = (tex_ofs + vec2(1.0)) / 2.0;
seed = texture2D(aux[#0], tex_ofs);
seed = rgb2hsv(seed);

// multiplying the value by w makes things look nice
// should possibly put this in a flag
seed = hsv2rgb(vec4(time * |spd| + |rot| + seed.x, |sat| * seed.y, |val| * seed.z * w, a * seed.a));


### Module
id fb_color
component fb_color
flags {lib}
par {scale:1.0, spd:0.0, rot:0.0, sat:1.0, val:1.0}

### Component
id fb_color
family seed_color
default_mod fb_color
code &&&
vec2 tex_ofs = mod(|scale| * ofs, 1.0);

//vec4 bg_seed = seed;

seed = texture2D(fb, tex_ofs);
seed = rgb2hsv(seed);

seed = hsv2rgb(vec4(time * |spd| + |rot| + seed.x, |sat| * seed.y, |val| * seed.z * w, a));// * seed.a));

//seed = bg_seed * 0.2 + seed * 0.8;

### Module
id tex_df_surface
component tex_df_surface
flags {lib, distance}
modules {seed0: tex_simple, seed1:tex_simple1}

### Component
id tex_df_surface
family seed_color
children {seed0:seed, seed1:seed}
default_mod tex_df_surface
code &&&
vec4 s0, s1;
ofs = ofs0;
%seed0%
seed = vec4(1.0, 0.0, 0.0, 1.0);
s0 = seed;

ofs = ofs1;
%seed1%
seed = vec4(1.0, 0.0, 0.0, 1.0);
s1 = seed;

seed = mix(s0, s1, df.w);

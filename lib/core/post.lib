### Module
id disp_id
component disp
modules {post: post_id}
flags {root}

### Module
id post_id
component post_id
flags {lib}

### Module
id post_hlim
component post_hlim
flags {lib, post_hlim}
par {gamma:1.0, hue:0.0, spread:0.5, lgv:0.5, sat_sc:1.0, inc_sc:0.1, gofs: 0.3}

### Component
id post_id
family post
default_mod post_id
code &&&
// Nothing

### Component
id post_hlim
family post
default_mod post_hlim
includes []
code &&&
// optimize me!

// creates a circular pallet of 3 somewhat associated colors.
// constructs final result by the input colors sat(scaled), value
// and hue_out = pallet(hue_in)

frame = gamma3(frame, |gamma|);
vec4 frame_rgb = frame;

frame = rgb2hsv(frame);

float inc = (frame.a - DEPTH_INC) / (1.0 - DEPTH_INC);
inc = |inc_sc| * inc;
float gofs = |gofs| * frame_rgb.x;

float h0 = 0.6 + 1.0 * gofs + 1.0 * inc + |hue|;
float h1 = 0.6 + 1.0 * gofs + 0.0 * inc + |hue| + |spread| / 2.0;
float h2 = 0.6 + 0.8 * gofs + 1.0 * inc + |hue| - |spread| / 2.0;

vec4 c0 = hsv2rgb(vec4(h0, 1.0, 1.0, 1.0));
vec4 c1 = hsv2rgb(vec4(h1, 1.0, |lgv|, 1.0));
vec4 c2 = hsv2rgb(vec4(h2, 1.0, |lgv|, 1.0));

vec4 res, r0, r1;
float f;

if(frame.x < 1.0 / 3.0){
  f = 3.0 * frame.x;
  r0 = c0;
  r1 = c1;
}else if(frame.x < 2.0 / 3.0){
  f = 3.0 * frame.x - 1.0;
  r0 = c1;
  r1 = c2;
}else{
  f = 3.0 * frame.x - 2.0;
  r0 = c2;
  r1 = c0;
}
res = (1.0 - f) * r0 + f * r1;

// modulate hue
res = rgb2hsv(res);
frame.x = res.x;
frame.y *= |sat_sc|;
frame = hsv2rgb(frame);

/*
// black & white?
float sc = (frame.x + frame.y + frame.z) / 3.0;
sc = sqrt(sqrt(sc));
frame = vec4(sc, sc, sc, frame.a);
*/

### Module
id disp_pal1
component disp
modules {post: post_pal1}
flags {root}

### Module
id post_pal1
component post_pallet1
flags {lib, post_pallet}
par {}

### Component
id post_pallet1
family post
default_mod post_pallet1
includes []
code &&&
vec4 frame_hsv = rgb2hsv(frame);
float idx = frame_hsv.x;

vec4 pal_res = vec4(pal(idx, vec3(0.5,0.5,0.5), vec3(0.5,0.5,0.5),
												vec3(2.0,1.0,0.0), vec3(0.5,0.20,0.25)), 1.0);

pal_res = rgb2hsv(pal_res);
pal_res.z = frame_hsv.z;

frame = hsv2rgb(pal_res);
//frame.z *= (frame.a - DEPTH_INC);//val;



### Module
id disp_gamma
component disp
modules {post: post_gamma}
flags {root}

### Module
id post_gamma
component post_gamma
flags {lib, post_gamma}
par {gamma: 0.8}

### Component
id post_gamma
family post
default_mod post_pallet1
includes []
code &&&

vec4 frame_hsv = rgb2hsv(frame);

float val = floor(frame_hsv.r * 20.0) / 20.0;

frame = gamma3(hsv2rgb(vec4(0.0, 0.0, val, 1.0)), |gamma|);

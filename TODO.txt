PROJECTS:
	- complex number library show hack
	- turn of dbg compiler warnings?

	- async (AFF?)
	  - lib requests
		- image requests
		- db requests

	- restructure data
		- modules are instances of components - with specific values for variables & scripts
		- components are instances of families.
		  - contain code
			- variable specifications ie how many par, how many images, & default values
		- families are variable names & dimensions.  basically where this object fits.
		- scripts could use some more thought.
		  - which module do they belong to?
			- how to syncronize multiple scripts? i.e, color & disp?
    - better data organization
	    - merge configs & states?
		  - what goes in config, what goes into states?
		- be better about reloading objects after refs might change
	  - pattern:
		  - patternRefPool?
      - make patterns modules/pattern level scripts?
	    - put pattern into systemST, patternRefPool.  stop passing pattern around
	    - interpolating between patterns?

	- database support
	  - which database?
		- how are things stored/serialized?
		- search by family, component, flags, props, id
		- what about things like libName?
		- sync local & remote dbs
		- put textures in db
		- misc:
		  - update flags on save (default != true)
  	  - check for duplicates when saving (id = hash of contents?)
      - namespace collisions detection

	- UI
	  - basic idea is that all db & data modifications happen through UI
		- but we need to completely rework how the ui happens.
		  - dont want to have to pause to update tree, that's kind of ghetto
			- individually pause paths/modules?
			- reactive UI?
		- ability to clone module tree & quickly make changes/save/load/etc
		- misc
		  - https://ace.c9.io/#nav=about
			- show shader source in tab

	- more importing/compiling
		- WINDOWS SUCKS - OSX Nvidia 640M?
		- batch compilation?
		- cleanup
		- MISC
		  - could maybe clean up switch a bit more (remove imports/purges, combine methods)
		  - maybe module.modules should be [SubModule = SubLib String | SubPool String] or something
      - module/submodule cycles??
			- only way to modify tree is via switch?

  - main pattern
    - T
	  - SEED
	  - COLOR still needs work some times
		- integrate fb color into main
		- framed images
		- different w's

  - misc
	  - auto scale performance for framerate or something
	  - could start whole application in global image loading callbacks
		- some kind of error reporting
		- menu available in dev

  - exposure
	  - codame
		- priceless
		- burningman?
		- museums?
		- twitter
		- dore
		- Scenario? (https://itunes.apple.com/us/app/scenario/id423444193?mt=12)
		- Chrome Experiments
		- Chrome Web store (https://developer.chrome.com/webstore/get_started_simple)

-------------------------------- BACKLOG --------------------------------

BUGS:
  - value should be main, vert, or disp when changing vals sometimes
  - black blobs in ios
  - freezing spinner (i think its the synchronous get requests for lib)
  - firefox WebGL: texImage2D: conversion requires pixel reformatting (maybe non-issue)
  - catch errors when parsing t_exp
  - no error message when image texture doesnt exist
  - reduce is a substition in seeds, but comes from appliction.  the order of "modules {x: .., y: ..}" matters :/

  - weird when opening console in fullscreen
  - shader indentation issues with switching & in general
  - error handling for failing to enter fullscreen mode
  - number parsing flakey? how so? floating point?

PERF:
  - zoom out performance problem.  unclear what the deal is.  really bad with 1/z(cache something or other?)
  - choppy in safari

SYSTEM:
  - do something smart if not enough resources (uniforms, tex, etc)
  - need to define funcs in main - planewave, etc
  - better deploy scripts
	- consolidate remote lib requests

  - scripts
    - way of switching modules while keeping phase/scripts.
	  - keep scripts when switching modules?
  - javascript files are all over the place
	- fract a sub on main body set in engine before compiling?
  - use git for deploy
  - addGlobalEventListeners is a bit ghetto
  - more work on fract.  more specific fracts.  like for seed vs T.  can possibly also increase quality
	- too many debug statements going on (in engine?)  Better logging
  - prevent default in ui.js
  - make serializable a class
  - remote control (webui, websockets, etc)
  - compiler substitutions %XXXX%, etc can still cause errors?  dont remember what kind
  - investigate dsl for scripts
  - engine stability/lost context - https://www.khronos.org/registry/webgl/extensions/WEBGL_lose_context/
  - main & disp share includes
  - preprocesser malfunctions give weird errors
	- chrome/ff shader debugger/editor
  - better engine error checking/handling
	- get rid of if statements ins seed_w & clean all of that up

FEATURE IDEAS:
	- optional increase of bit depth - half float, etc (works?  not obvious is better; half_float = 36193)
	- shader precision optimization? mediump, highp, etc
  - blend maps!! variable interpolation
	- catagorize transformations:
  	- symmetries, is_inversion, scale, periodic?, rational?, accumulation points, empty regions?, elementary, custom?
	- use images(self????) as transformations
	- vector fields
  - seed impulses
	- graphically outline seeds?
	- animate seed textures somehow
	- superformula - https://en.wikipedia.org/wiki/Superformula
  - for each pixel, define a normal vector, so we can do lighting & material effects
  - investigate dsl for scripts
  - webcam input

FUTURE:
  - test on ipad
  - test on android
	- unit tests
  - logging system
  - programming guidelines document - i.e make sure all tree modifications rebuild mod ref lib
  - benchmarking tools
  - image comparison testing

NO CLUE:
  - saving images loses bit depth??
  - weird divide by zero issue - glitch in content
p  - maybe pixel alignment issues with images?
	- change resolution during switching error?


MATH:
  t_inner:z / (z + 1) + z / (z - 1)}
  zn [1.500 + 0.000i, 0.000 + 0.000i, 0.800 + 0.000i, 0.200 + 0.000i]
  creates a legitimate fractal
	I saw something that might explain it
